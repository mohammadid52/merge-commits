enum Language {
  EN
  ES
  VT
  TR
  CZ
}

enum PersonStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
  HOLD
}

enum Role {
  SUP
  ADM
  BLD
  FLW
  CRD
  TR
  ST
}

## Institution:
# Main table for definition of an institution. This table is connected to Person (has-many) and Class (has-many). Has nested type of Contact.
## Keys:
# primary — id
## Required fields:
# id
# name
# type ( from Filter table )
# address
# city
# zip
# contact ( name, phone, email )

type Institution @model @key(fields: ["id"]) {
  id: ID!
  name: String!
  type: String!
  district: String
  address: String!
  addressLine2: String
  city: String!
  state: String
  zip: String!
  phone: String
  contact: Contact!
  # coordinator: [Person]
  website: String
  image: String
}

type Contact {
  name: String!
  phone: String!
  email: String!
}

## Person
# Main table for user information. This table ıs connected to Institution (belongs-to), Class (has-many), ......... Has ENUM types Language, Role, and PersonStatus.
## Keys:
# primary — email
# secondary — authId
# byContributor ** IGNORE **
# byUserId — allows for queries by userID
# byRole — allows for queries by role
## Required fields:
# id
# authId
# status ( ENUM )
# role ( ENUM )
# firstName
# lastName
# institutionID
# language ( ENUM )

type Person
  @model
  @key(fields: ["email", "authId"])
  @key(name: "byContributor", fields: ["id"])
  @key(name: "byUserId", fields: ["id"], queryField: "userById")
  @key(name: "byRole", fields: ["role"], queryField: "usersByRole") {
  id: ID!
  authId: String!
  status: PersonStatus!
  email: String!
  role: Role!
  type: String
  firstName: String!
  preferredName: String
  lastName: String!
  externalId: String
  grade: String
  #courses
  wordbank: [StudentWord] @connection(keyName: "wordsByStudent", fields: ["email"])
  onBoardSurvey: Boolean
  offBoardSurvey: Boolean
  phone: String
  birthdate: AWSDate
  image: String
  language: Language!
  filters: [String]
}

type Curriculum @model @key(fields: ["id"]) {
  id: ID!
  name: String!
  type: String
  description: String
  objectives: [String]
  # contributors: [Person]
  # grade: [Int]
  languages: [Language]
  units: [Unit] @connection(keyName: "byCurriculum", fields: ["id"])
}

type Unit @model @key(fields: ["id"]) @key(name: "byCurriculum", fields: ["curriculumID"]) {
  id: ID!
  name: String!
  type: String
  description: String
  objectives: [String]
  curriculumID: ID!
  languages: [Language]
  lessons: [LessonUnit] @connection(keyName: "lessonByUnit", fields: ["id"])
}

# type CurriculumLessons @model(queries: null)
# @key(name: "byCurriculum", fields: ["curriculumID", "lessonID"]) {
#   id: ID!
#   curriculumID: ID!
#   lessonID: ID!
#   curriculum: Curriculum @connection(fields: ["curriculumID"])
#   lesson: Lesson @connection(fields: ["lessonID"])
# }

type LessonUnit @model(queries: null) @key(name: "lessonByUnit", fields: ["unitID", "lessonID"]) {
  id: ID!
  unitID: ID!
  lessonID: ID!
  unit: Unit @connection(fields: ["unitID"])
  lesson: Lesson @connection(fields: ["lessonID"])
}

# enum CourseType {
#   CLASS
#   EXCURR
#   DIST
# }

type Course @model {
  id: ID!
  name: String!
  type: String
  institution: Institution
  # classroomTeachers
  # fellows
  classID: ID!
  class: Class @connection(fields: ["classID"])
  curriculumID: ID!
  curriculum: Curriculum @connection(fields: ["curriculumID"])
  classrooms: [Classroom] @connection(keyName: "byCourse", fields: ["id"])
  location: String
  startDate: AWSDate
  endDate: AWSDate
  duration: Int
}

type Class @model {
  id: ID!
  type: String
  name: String!
  students: [ClassStudent]! @connection(keyName: "byClass", fields: ["id"])
}

type ClassStudent @model(queries: null) @key(name: "byClass", fields: ["classID", "studentID"]) {
  id: ID!
  classID: ID!
  studentID: ID!
  studentEmail: String!
  studentAuth: String!
  class: Class @connection(fields: ["classID"])
  student: Person @connection(fields: ["studentEmail", "studentAuth"])
}

type DataObject {
  name: String!
  data: String!
}

type AdditionalInputs {
  name: String
  input: String
}

type TruthGameInputs {
  id: String
  label: String
  isLie: Boolean
  text: String
}

type WarmUpData {
  story: String
  title: String
  additional: [AdditionalInputs]
  truthGame: [TruthGameInputs]
}

type SelectedWord {
  id: Int
  text: String
}

type Selection {
  anchor: String
  color: String
  content: [SelectedWord]
  focus: String
  id: Int
}

type RawSelection {
  color: String
  selected: [String]
}

type CoreLessonData {
  selected: [Selection]
  rawSelected: [RawSelection]
  selectGroup: Int
}

type LineInput {
  example: String
  id: Int
  menuOpen: Boolean
  text: String
}

type ActivityData {
  editInput: String
  editMode: Boolean
  lines: [LineInput]
  title: String
}

type Subscription {
  onUpdateClassroom(id: ID!): Classroom @aws_subscribe(mutations: ["updateClassroom"])
  onChangeStudentData(classroomID: ID!): StudentData
    @aws_subscribe(mutations: ["createStudentData", "updateStudentData"])
}

type StudentData
  @model(subscriptions: null)
  @key(fields: ["classroomID", "studentID"])
  @key(name: "byClassroom", fields: ["classroomID", "studentID"]) {
  id: ID!
  lessonProgress: String!
  currentLocation: String
  status: String!
  saveType: String
  classroomID: ID!
  classroom: Classroom @connection(fields: ["classroomID"])
  studentID: String!
  studentAuthID: String!
  student: Person! @connection(fields: ["studentID", "studentAuthID"])
  warmupData: WarmUpData
  corelessonData: CoreLessonData
  activityData: ActivityData
  doFirstData: [QuestionDataStudentData]! @connection(name: "byStudentData", fields: ["id"])
  checkpointData: [QuestionDataStudentData]! @connection(name: "byStudentData", fields: ["id"])
}

type ComponentSummary {
  id: ID
  disabled: Boolean!
  open: Boolean!
  active: Boolean!
  stage: String!
  type: String!
  displayMode: String
}

type Quote {
  id: String
  source: String
  text: String!
}

type Link {
  id: String
  type: String
  text: String
  link: String
}

type AdditionalContent {
  video: String
  links: [Link]
}

type Artist @model {
  id: ID!
  images: [String!]
  name: String!
  type: String!
  bio: [String!]!
  quotes: [Quote!]!
  additionalContent: AdditionalContent
}

type StudentInfo {
  id: String
  firstName: String
  preferredName: String
  lastName: String
}

type DisplayData {
  breakdownComponent: String
  studentInfo: StudentInfo
  # doFirstData: doFirstData
  warmUpData: WarmUpData
  corelessonData: CoreLessonData
  activityData: ActivityData
}

type Classroom @model(subscriptions: null) @key(name: "byCourse", fields: ["courseID", "lessonID"]) {
  id: ID!
  open: Boolean!
  openedAt: AWSDate
  closedAt: AWSDate
  complete: Boolean
  roster: [String!]!
  viewing: String
  displayData: DisplayData
  expectedStartDate: AWSDate
  expectedEndDate: AWSDate
  SELStructure: String
  courseID: ID!
  course: Course @connection(fields: ["courseID"])
  lessonID: ID!
  lesson: Lesson @connection(fields: ["lessonID"])
  lessonPlan: [ComponentSummary!]!
  data: [StudentData]! @connection(keyName: "byClassroom", fields: ["id"])
  feedback: [Feedback] @connection(fields: ["id"])
}

type Feedback @model {
  id: ID!
  classroomID: ID!
  liked: String
  comment: String
  classroom: Classroom @connection(fields: ["classroomID"])
}

type SELStructure @model {
  id: ID!
  name: String!
  description: String
}

type ThemeTemplate @model {
  id: ID!
  type: String
  name: String!
  summary: [String!]!
  summaryLabel: String!
  quote: [Quote]
  keywords: [LessonKeyWord] @connection(keyName: "wordsByLesson", fields: ["id"])
  connection: String
  images: [String!]!
  additionalContent: AdditionalContent
}

type Theme {
  type: String
  name: String!
  summary: [String!]!
  summaryLabel: String!
  quote: [Quote]
  # keywords: [LessonKeyWord] @connection(keyName: "wordsByLesson", fields: ["id"])
  connection: String
  images: [String!]!
  additionalContent: AdditionalContent
}

type Lesson @model @key(fields: ["id"]) {
  id: ID!
  title: String!
  type: String
  instructions: [String]
  theme: Theme
  contributors: [Person]! @connection(keyName: "byContributor", fields: ["id"])
  grades: [Int]
  artistID: ID!
  artist: Artist! @connection(fields: ["artistID"])
  language: Language!
  SELStructure: String
  keywords: [LessonKeyWord] @connection(keyName: "wordsByLesson", fields: ["id"])
  connection: String
  summary: String!
  objectives: [String]!
  checkpoints: [LessonCheckpoint]! @connection(keyName: "byLesson", fields: ["id"])
  doFirstID: ID!
  doFirst: DoFirst @connection(fields: ["doFirstID"])
  warmUpId: ID!
  warmUp: WarmUp @connection(fields: ["warmUpId"])
  coreLessonId: ID!
  coreLesson: CoreLesson @connection(fields: ["coreLessonId"])
  activityId: ID!
  activity: Activity @connection(fields: ["activityId"])
  assessmentID: ID!
  assessment: Assessment @connection(fields: ["assessmentID"])
  filters: [String]
}

type LessonCheckpoint @model(queries: null) @key(name: "byLesson", fields: ["lessonID", "checkpointID"]) {
  id: ID!
  lessonID: ID!
  checkpointID: ID!
  position: Int!
  lesson: Lesson @connection(fields: ["lessonID"])
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
}

type DoFirst @model {
  id: ID!
  type: String!
  required: Boolean!
  questions: [DoFirstQuestion!]! @connection(keyName: "byDoFirst", fields: ["id"])
}

type DoFirstQuestion @model(queries: null) @key(name: "byDoFirst", fields: ["doFirstID", "questionID"]) {
  id: ID!
  doFirstID: ID!
  questionID: ID!
  doFirst: DoFirst @connection(fields: ["doFirstID"])
  question: Question @connection(fields: ["questionID"])
}

type Instructions {
  video: Boolean!
  link: String
  text: [String!]!
}

type Breakdown {
  included: Boolean!
  reflectionQuestions: [String]
}

type TruthGameInput {
  id: String
  label: String
}

type Inputs {
  title: Boolean!
  example: String
  titleExample: String
  textExample: String
  truthGameInputs: [TruthGameInput]
  additionalInputs: [WritingPrompts!]
}

type WritingPrompts {
  id: Int
  name: String!
  prompt: String!
  example: String!
}

type WarmUp @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  inputs: Inputs!
  breakdown: Breakdown!
}

type Content {
  video: Boolean!
  link: String
  title: String!
  artist: String!
  text: [String!]!
}

type Tool {
  id: String
  name: String!
  color: String!
  icon: String!
}

type CoreLesson @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  content: Content!
  tools: [Tool!]!
  breakdown: Breakdown!
}

type Activity @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  lineNumber: Int
  writingPrompts: [WritingPrompts!]!
  breakdown: Breakdown!
}

type Checkpoint @model {
  id: ID!
  label: String!
  title: String
  subtitle: String
  type: String!
  instructions: String!
  questions: [CheckpointQuestions]! @connection(keyName: "byCheckpoint", fields: ["id"])
}

type CheckpointQuestions
  @model(queries: null)
  @key(name: "byCheckpoint", fields: ["checkpointID", "questionID"])
  @key(name: "byQuestion", fields: ["questionID", "checkpointID"]) {
  id: ID!
  checkpointID: ID!
  questionID: ID!
  required: Boolean!
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
  question: Question @connection(fields: ["questionID"])
}

type Assessment @model {
  id: ID!
  title: String!
  type: String!
  openingMessage: [String]
  closingMessage: [String]
  checkpoints: [AssessmentCheckpoint] @connection(keyName: "checkpointByAssessment", fields: ["id"])
}

type AssessmentCheckpoint @model @key(name: "checkpointByAssessment", fields: ["assessmentID", "checkpointID"]) {
  id: ID!
  assessmentID: ID!
  checkpointID: ID!
  assessment: Assessment @connection(fields: ["assessmentID"])
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
}

type Option {
  text: String!
  label: String
  icon: String
  color: String
}

type Question @model {
  id: ID!
  label: String!
  type: String!
  question: String!
  options: [Option]
}

type QuestionData @model {
  id: ID!
  questionID: ID!
  classroomID: ID!
  email: String!
  authID: String!
  classroom: Classroom @connection(fields: ["classroomID"])
  question: Question @connection(fields: ["questionID"])
  person: Person @connection(fields: ["email", "authID"])
  response: String
}

type QuestionDataStudentData
  @model(queries: null)
  @key(name: "byStudentData", fields: ["studentDataID", "questionDataID"]) {
  id: ID!
  studentDataID: ID!
  studentData: StudentData @connection(fields: ["studentDataID"])
  questionDataID: ID!
  questionData: QuestionData @connection(fields: ["questionDataID"])
}

type Word @model @key(name: "byWord", fields: ["word"], queryField: "searchByWord") {
  id: ID!
  word: String!
  definition: String
}

type LessonKeyWord @model(queries: null) @key(name: "wordsByLesson", fields: ["lessonID", "wordID"]) {
  id: ID!
  wordID: ID!
  lessonID: ID!
  word: Word @connection(fields: ["wordID"])
  lesson: Lesson @connection(fields: ["lessonID"])
}

type StudentWord @model(queries: null) @key(name: "wordsByStudent", fields: ["studentID", "wordID"]) {
  id: ID!
  wordID: ID!
  studentID: String!
  studentAuthID: String!
  word: Word @connection(fields: ["wordID"])
  student: Person @connection(fields: ["studentID", "studentAuthID"])
}

type Filter @model {
  id: ID!
  name: String!
  description: String
  editable: Boolean
  options: [FilterOption!]! @connection(keyName: "byFilter", fields: ["id"])
}

type FilterOption @model @key(fields: ["id"]) @key(name: "byFilter", fields: ["filterID"]) {
  id: ID!
  filterID: ID!
  text: String!
  filter: Filter @connection(fields: ["filterID"])
}

type Client @model {
  id: ID!
  name: String!
  architecture: [Architecture] @connection(name: "architectureByClient", fields: ["id"])
}

type Architecture
  @model
  @key(name: "architecturesByClient", fields: ["clientID", "id"])
  @key(name: "architectureByClient", fields: ["clientID"]) {
  id: ID!
  name: String!
  clientID: ID!
  client: Client @connection(fields: ["clientID"])
  types: [Type] @connection(keyName: "typeByArchitecture", fields: ["id"])
  filters: [ArchitectureFilter] @connection(keyName: "filtersByArchitecture", fields: ["id"])
}

type Type
  @model
  @key(name: "typesByArchitecture", fields: ["architectureID", "id"])
  @key(name: "typeByArchitecture", fields: ["architectureID"]) {
  id: ID!
  name: String!
  architectureID: ID!
  architecture: Architecture @connection(fields: ["architectureID"])
  filters: [FilterType] @connection(keyName: "filtersByType", fields: ["id"])
}

type FilterType @model(queries: null) @key(name: "filtersByType", fields: ["typeID", "filterID"]) {
  id: ID!
  typeID: ID!
  filterID: ID!
  multiselect: Boolean
  required: Boolean
  type: Type @connection(fields: ["typeID"])
  filter: Filter @connection(fields: ["filterID"])
}

type ArchitectureFilter
  @model(queries: null)
  @key(name: "filtersByArchitecture", fields: ["architectureID", "filterID"]) {
  id: ID!
  architectureID: ID!
  filterID: ID!
  multiselect: Boolean
  required: Boolean
  architecture: Architecture @connection(fields: ["architectureID"])
  filter: Filter @connection(fields: ["filterID"])
}

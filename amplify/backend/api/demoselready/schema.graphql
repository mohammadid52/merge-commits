enum Language {
  EN
  ES
  VT
  TR
  CZ
}

enum PersonStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
  HOLD
}

enum Role {
  SUP
  ADM
  BLD
  FLW
  CRD
  TR
  ST
}

type InstitutionType @model {
  id: ID!
  name: String!
}

# enum InstitutionType {
#   ELEM
#   MID
#   HIGH
#   CORR
#   CAMP
#   EXCURR
# }

type Contact { 
  name: String
  phone: String
  email: String
}

type Institution @model @key(fields: ["id"]) {
  id: ID!
  name: String!
  institutionTypeId: ID!
  institutionType: InstitutionType @connection(fields: ["institutionTypeId"])
  district: String
  address: String!
  city: String!
  state: String
  zip: String!
  phone: String
  contact: Contact!
  website: String
  # coordinator: [Person]
  type: InstitutionType @connection
  image: String
}

type Person @model
@searchable
@key(fields: ["email", "authId"]) 
@key(name: "byContributor", fields: ["id"])
@key(name: "byUserId", fields: ["id"], queryField: "userById")
@key(name: "byRole", fields: ["role"], queryField: "usersByRole")
{
  id: ID!
  authId: String!
  status: PersonStatus!
  email: String!
  role: Role!
  firstName: String!
  preferredName: String
  lastName: String!
  # institutionId: ID!
  # institution: Institution @connection(fields: ["institutionId"])
  externalId: String
  grade: String
  # courses: [StudentCourse] @connection(keyName: "byStudent", field: ["id"]
  wordbank: [StudentWord] @connection(keyName: "wordsByStudent", fields: ["email"])
  onBoardSurvey: Boolean
  offBoardSurvey: Boolean
  phone: String
  birthdate: AWSDate
  image: String
  language: Language!
}

type Curriculum @model @key(fields: ["id"]) {
  id: ID!
  name: String
  contributors: [Person] @connection(keyName: "byContributor", fields: ["id"])
  grade: [Int]
  languages: [Language]
  lessons: [CurriculumLessons] @connection(keyName: "byCurriculum", fields: ["id"])
}

type CurriculumLessons @model(queries: null)
@key(name: "byCurriculum", fields: ["curriculumID", "lessonID"]) {
  id: ID!
  curriculumID: ID!
  lessonID: ID!
  curriculum: Curriculum @connection(fields: ["curriculumID"])
  lesson: Lesson @connection(fields: ["lessonID"])
}

# enum CourseType {
#   CLASS
#   EXCURR
#   DIST
# }

type Course @model {
  id: ID!
  name: String!
  courseTypeID: String!
  institution: Institution
  # classroomTeachers: [Person]!
  # fellows: [Person]!
  classID: ID!
  class: Class @connection(fields: ["classID"])
  curriculumID: ID!
  curriculum: Curriculum @connection(fields: ["curriculumID"])
  classrooms: [Classroom] @connection(keyName: "byCourse", fields: ["id"])
  location: String
  startDate: AWSDate
  endDate: AWSDate
  duration: Int
}

type Class @model {
  id: ID!
  name: String!
  students: [ClassStudent]! @connection(keyName: "byClass", fields: ["id"])
}

type ClassStudent @model(queries: null)
@key(name: "byClass", fields: ["classID", "studentID"])
{
  id: ID!
  classID: ID!
  studentID: ID!
  studentEmail: String!
  studentAuth: String!
  class: Class @connection(fields: ["classID"])
  student: Person @connection( fields:["studentEmail", "studentAuth"])
}

type DataObject {
  name: String!
  data: String!
}

type AdditionalInputs {
  name: String
  input: String
}

type WarmUpData {
  story: String
  title: String
  additional: [AdditionalInputs]
}

type SelectedWord {
  id: Int
  text: String
}

type Selection {
  anchor: String
  color: String
  content: [SelectedWord]
  focus: String
  id: Int
}

type RawSelection {
  color: String
  selected: [String]
}

type CoreLessonData {
  selected: [Selection]
  rawSelected: [RawSelection]
  selectGroup: Int
}

type LineInput {
  example: String
  id: Int
  menuOpen: Boolean
  text: String
}

type ActivityData {
  editInput: String
  editMode: Boolean
  lines: [LineInput]
  title: String
}

type Subscription {
  onUpdateClassroom(id: ID!): Classroom @aws_subscribe(mutations: ["updateClassroom"])
  onChangeStudentData(classroomID: ID!):
  StudentData @aws_subscribe(mutations: ["createStudentData", "updateStudentData"])
}

type StudentData @model(subscriptions: null)
@key(fields: ["classroomID", "studentID"])
@key(name: "byClassroom", fields: ["classroomID", "studentID"])
{
  id: ID!
  lessonProgress: String!
  currentLocation: String
  status: String!
  saveType: String
  classroomID: ID!
  classroom: Classroom @connection(fields: ["classroomID"])
  # studentDataClassroomId: String
  studentID: String!
  studentAuthID: String!
  student: Person! @connection(fields: ["studentID", "studentAuthID"])
  warmupData: WarmUpData
  corelessonData: CoreLessonData
  activityData: ActivityData
  doFirstData: [QuestionDataStudentData]! @connection(name: "byStudentData", fields: ["id"])
  checkpointData: [QuestionDataStudentData]! @connection(name: "byStudentData", fields: ["id"])
}

type ComponentSummary {
  id: ID
  disabled: Boolean!
  open: Boolean!
  active: Boolean!
  stage: String!
  type: String!
  displayMode: String
}

type Quote {
  source: String
  text: String!
}

type Link {
  type: String
  text: String
  link: String
}

type AdditionalContent {
  video: String
  links: [Link]
}

type Artist @model
{
  id: ID!
  images: [String!]
  name: String!
  type: String!
  bio: [String!]!
  quotes: [Quote!]!
  additionalContent: AdditionalContent
}

type StudentInfo {
  id: String
  firstName: String
  preferredName: String
  lastName: String
}

type DisplayData {
  breakdownComponent: String
  studentInfo: StudentInfo
  # doFirstData: doFirstData
  warmUpData: WarmUpData
  corelessonData: CoreLessonData
  activityData: ActivityData
}

type Classroom @model(subscriptions: null) 
@key(name: "byCourse", fields: ["courseID", "lessonID"])
{
  id: ID!
  open: Boolean!
  openedAt: AWSDate
  closedAt: AWSDate
  complete: Boolean
  roster: [String!]!
  viewing: String
  displayData: DisplayData
  expectedStartDate: AWSDate
  expectedEndDate: AWSDate
  SELStructure: String
  courseID: ID!
  course: Course @connection(fields: ["courseID"])
  lessonID: ID!
  lesson: Lesson @connection(fields: ["lessonID"])
  lessonPlan: [ComponentSummary!]!
  data: [StudentData]! @connection(keyName: "byClassroom", fields: ["id"])
  feedback: [Feedback] @connection(fields: ["id"])
}

type Feedback @model {
  id: ID!
  classroomID: ID!
  liked: String
  comment: String
  classroom: Classroom @connection(fields: ["classroomID"])
}

type SELStructure @model {
  id: ID!
  name: String!
  description: String
}


type Lesson @model @key(fields: ["id"]) {
  id: ID!
  title: String! 
  type: String
  instructions: [String]
  contributors: [Person]! @connection(keyName: "byContributor", fields: ["id"])
  grades: [Int]
  artistID: ID!
  artist: Artist! @connection(fields: ["artistID"])
  language: Language!
  SELStructureID: ID!
  SELStructure: SELStructure @connection(fields: ["SELStructureID"])
  keywords: [LessonKeyWord] @connection(keyName: "wordsByLesson", fields: ["id"])
  connection: String
  summary: String!
  objectives: [String]!
  # primarySELType: SELType! @connection
  checkpoints: [LessonCheckpoint]! @connection(keyName: "byLesson", fields: ["id"])
  doFirstID: ID!
  doFirst: DoFirst @connection(fields: ["doFirstID"])
  warmUpId: ID!
  warmUp: WarmUp @connection(fields: ["warmUpId"])
  coreLessonId: ID!
  coreLesson: CoreLesson @connection(fields: ["coreLessonId"])
  activityId: ID!
  activity: Activity @connection(fields: ["activityId"])
  assessmentID: ID!
  assessment: Assessment @connection(fields: ["assessmentID"])
}

type LessonCheckpoint @model(queries: null)
@key(name: "byLesson", fields: ["lessonID", "checkpointID"])
{
  id: ID!
  lessonID: ID!
  checkpointID: ID!
  position: Int!
  lesson: Lesson @connection(fields: ["lessonID"])
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
}

type DoFirst @model {
  id: ID!
  type: String!
  required: Boolean!
  questions: [DoFirstQuestion!]! @connection(keyName: "byDoFirst", fields: ["id"])
}

type DoFirstQuestion @model(queries: null) 
@key(name: "byDoFirst", fields: ["doFirstID", "questionID"])
{
  id: ID!
  doFirstID: ID!
  questionID: ID!
  doFirst: DoFirst @connection(fields: ["doFirstID"])
  question: Question @connection(fields: ["questionID"])
}

type Instructions {
  video: Boolean!
  link: String
  text: [String!]!
}

type Breakdown {
  included: Boolean!
  reflectionQuestions: [String]
}

type Inputs {
  title: Boolean!
  example: String
  titleExample: String
  textExample: String
  additionalInputs: [WritingPrompts!]
}

type WritingPrompts {
  id: Int
  name: String!
  prompt: String!
  example: String!
}

type WarmUp @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  inputs: Inputs!
  breakdown: Breakdown!
}

type Content {
  video: Boolean!
  link: String
  title: String!
  artist: String!
  text: [String!]!
}

type Tool {
  name: String!
  color: String!
  icon: String!
}

type CoreLesson @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  content: Content!
  tools: [Tool!]!
  breakdown: Breakdown!
}

type Activity @model {
  id: ID!
  title: String!
  label: String!
  stage: String!
  type: String!
  language: Language!
  SELTypes: [ID!]
  instructions: Instructions!
  lineNumber: Int
  writingPrompts: [WritingPrompts!]!
  breakdown: Breakdown!
}

type Checkpoint @model {
  id: ID!
  label: String!
  title: String
  subtitle: String
  type: String!
  instructions: String!
  questions: [CheckpointQuestions]! @connection(keyName: "byCheckpoint", fields: ["id"])
}

type CheckpointQuestions @model(queries: null) 
@key(name: "byCheckpoint", fields: ["checkpointID", "questionID"])
@key(name: "byQuestion", fields: ["questionID", "checkpointID"])
{
  id: ID!
  checkpointID: ID!
  questionID: ID!
  required: Boolean!
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
  question: Question @connection(fields: ["questionID"])
}

type Assessment @model {
  id: ID!
  title: String!
  type: String!
  openingMessage: [String]
  closingMessage: [String]
  checkpoints: [AssessmentCheckpoint] @connection(keyName: "checkpointByAssessment", fields: ["id"])
}

type AssessmentCheckpoint @model 
@key(name: "checkpointByAssessment", fields: ["assessmentID", "checkpointID"])
{
  id: ID!
  assessmentID: ID!
  checkpointID: ID!
  assessment: Assessment @connection(fields: ["assessmentID"])
  checkpoint: Checkpoint @connection(fields: ["checkpointID"])
}

type Option {
  text: String!
  label: String
  icon: String
  color: String
}

type Question @model {
  id: ID!
  label: String!
  type: String!
  question: String!
  options: [Option]
}

type QuestionData @model {
  id: ID!
  questionID: ID!
  classroomID: ID!
  email: String!
  authID: String!
  classroom: Classroom @connection(fields: ["classroomID"])
  question: Question @connection(fields: ["questionID"])
  person: Person @connection(fields: ["email", "authID"])
  response: String
}

type QuestionDataStudentData @model(queries: null) 
@key(name: "byStudentData", fields: ["studentDataID", "questionDataID"])
{
  id: ID!
  studentDataID: ID!
  studentData: StudentData @connection(fields: ["studentDataID"])
  questionDataID: ID!
  questionData: QuestionData @connection(fields: ["questionDataID"])
}

type Word @model
@key(name: "byWord", fields: ["word"], queryField: "searchByWord")
{
  id: ID!
  word: String!
  definition: String
}

type LessonKeyWord @model(queries: null)
@key(name: "wordsByLesson", fields: ["lessonID", "wordID"])
{
  id: ID!
  wordID: ID!
  lessonID: ID!
  word: Word @connection(fields: ["wordID"])
  lesson: Lesson @connection(fields: ["lessonID"])
}

type StudentWord @model(queries: null)
@key(name: "wordsByStudent", fields: ["studentID", "wordID"])
{
  id: ID!
  wordID: ID!
  studentID: String!
  studentAuthID: String!
  word: Word @connection(fields: ["wordID"])
  student: Person @connection(fields: ["studentID", "studentAuthID"])
}
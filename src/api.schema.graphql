enum Language {
  EN
  ES
}

enum ClassroomType {
  ONLINE
  TRADITIONAL
}

enum TeachingStyle {
  PERFORMER
  ACADEMIC
}

enum PersonStatus {
  ACTIVE
  INACTIVE
  TRAINING
}

enum UserPageState {
  DASHBOARD
  NOT_LOGGED_IN
  LOGGED_IN
  GAME_CHANGERS
  COMMUNITY
  NOTEBOOK
  CLASS
  LESSON
}

enum Role {
  SUP
  ADM
  BLD
  FLW
  TR
  ST
}

enum RoomStatus {
  ACTIVE
  INACTIVE
  TRAINING
}

enum ErrorStatus {
  PENDING
  CLOSED
  REVIEW
}

enum UpdateType {
  DEMOGRAPHIC_DATA_UPDATE
  SURVEY_DATA_UPDATE
}

# Types

type QuestionResults {
  QuestionId: ID!
  QuestionLabel: String!
  QuestionResponse: String!
}

type StudentSharing {
  isTeacher: Boolean
  studentAuthID: String
  lessonPageID: String
}

type ImpactLogEntry {
  impactDate: AWSDate
  reasonComment: String
  lessonImpact: Float
  adjustment: String
}

type CompleteLesson {
  lessonID: String
  time: AWSDateTime
}

type Option {
  text: String!
  label: String
  icon: String
  color: String
}

type AnthologyContent {
  type: String
  subType: String
  title: String
  subTitle: String
  description: String
  content: String
  classID: ID
  feedbacks: [String]
  edited: Boolean
}

type Attachment {
  type: String
  url: String
  filename: String
  size: Int
}

type UniversalLessonPlan {
  id: String
  title: String
  label: String
  description: String
  class: String
  active: Boolean
  disabled: Boolean
  displayMode: String
  open: Boolean
  estTime: String
  pageContent: [UniversalpageContent]
  activityType: String
  interactionType: [String]
  tags: [String]
  videoLink: String
  notes: String
}

type UniversalpageContent {
  id: String
  tags: [String]
  partType: String
  class: String
  partContent: [UniversalPartContent]
  showIfAsync: Boolean
}

type UniversalPartContent {
  id: String
  type: String
  class: String
  value: [UniversalContent]
  isRequired: Boolean
}

type UniversalContent {
  id: String
  type: String
  label: String
  value: String
  options: [UniversalContentOptions]
  caption: String
  height: String
  width: String
  class: String
  isRequired: Boolean
}

type UniversalContentOptions {
  id: String
  label: String
  text: String
}

type ComponentSummary {
  id: ID
  disabled: Boolean!
  open: Boolean!
  active: Boolean!
  stage: String!
  type: String!
  displayMode: String
}

type File {
  fileName: String!
  fileKey: String!
  fileSize: Int
}

type Translation {
  id: String
  translateLanguage: String!
  languageTranslation: String!
  languageDefinition: String
}

#Person - App users table.
type Person @model @auth(rules: [{allow: private}]) {
  id: ID! @index(name: "byUserId", queryField: "userById")
  authId: String!
  status: PersonStatus!
  email: String! @primaryKey(sortKeyFields: ["authId"])
  role: Role! @index(name: "byRole", queryField: "usersByRole")
  type: String
  firstName: String!
  preferredName: String
  lastName: String!
  inactiveStatusDate: AWSDate
  image: String
  language: Language!
  lastLoggedIn: AWSDateTime
  lastLoggedOut: AWSDateTime
  onDemand: Boolean
  sentiments: [String]
  passcode: String
  classes: [ClassStudent] @hasMany(indexName: "classByStudent", fields: ["email"])
  lessons: [PersonLessonsData] @hasMany(indexName: "byStudentAuthID", fields: ["authId"])
  spotlightUser: Boolean
  spotlightDate: AWSDate
  statusReason: String
  addedby: String
  lastEmotionSubmission: AWSDate
  pageState: UserPageState @default(value: "NOT_LOGGED_IN")
  lastPageStateUpdate: String
  statusChangedBy: String
  isZoiq: Boolean
}

type PersonLessonsData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  studentAuthID: String! @index(name: "byStudentAuthID")
  studentEmail: String!
  lessonID: ID!
  lessonType: String @index(name: "byLessonType", queryField: "lessonsByType2")
  pages: AWSJSON
  ratings: Int @default(value: "0")
  isCompleted: Boolean @default(value: "false")
  roomId: ID
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  room: Room @hasOne(fields: ["roomId"])
}

type Institution @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  name: String!
  type: String!
  district: String
  address: String!
  addressLine2: String
  city: String!
  state: String
  zip: String!
  phone: String
  website: String
  image: String
  isServiceProvider: Boolean
  isZoiq: Boolean
  serviceProviders: [ServiceProvider]
    @hasMany(indexName: "providersByPartner", fields: ["id"])
  staff: [Staff] @hasMany(indexName: "staffByInstitution", fields: ["id"])
  rooms: [Room] @hasMany(indexName: "roomByInstitution", fields: ["id"])
  curricula: [Curriculum] @hasMany(indexName: "curriculumByInstitution", fields: ["id"])
  classes: [Class] @hasMany(indexName: "classByInstitution", fields: ["id"])
  filters: [String]
  checkpoints: [commonCheckpoint] @hasMany(indexName: "byType", fields: ["id"])
  setupComplete: Boolean
}

type ServiceProvider @model(queries: null) @auth(rules: [{allow: private}]) {
  id: ID!
  partnerID: ID! @index(name: "providersByPartner", sortKeyFields: ["providerID"])
  providerID: ID!
  status: String
  providerInstitution: Institution @hasOne(fields: ["providerID"])
}

type Staff @model @auth(rules: [{allow: private}]) {
  id: ID!
  institutionID: ID! @index(name: "staffByInstitution", sortKeyFields: ["staffEmail"])
  staffAuthID: String!
  staffEmail: String!
  status: String
  statusChangeDate: AWSDate
  staffMember: Person @hasOne(fields: ["staffEmail", "staffAuthID"])
  institution: Institution @belongsTo(fields: ["institutionID"])
}

type Room @model @auth(rules: [{allow: private}]) {
  id: ID!
  institutionID: ID! @index(name: "roomByInstitution")
  classID: ID
  teacherAuthID: String!
  teacherEmail: String!
  name: String!
  maxPersons: Int
  status: RoomStatus @default(value: "ACTIVE")
  filters: [String]
  location: String
  startDate: AWSDate
  startTime: AWSTime
  endDate: AWSDate
  endTime: AWSTime
  length: Int
  repeat: String
  notes: String
  activeSyllabus: String
  frequency: String
  coTeachers: [RoomCoTeachers] @hasMany(indexName: "byRoom", fields: ["id"])
  institution: Institution @belongsTo(fields: ["institutionID"])
  teacher: Person @hasOne(fields: ["teacherEmail", "teacherAuthID"])
  class: Class @hasOne(fields: ["classID"])
  curricula: [RoomCurriculum] @hasMany(indexName: "curriculumByRoom", fields: ["id"])
  activeLessonId: String
  ClosedPages: [String]
  disabledPages: [String]
  studentViewing: String
  displayData: [StudentSharing]
  currentPage: String
  completedLessons: [CompleteLesson]
  activeLessons: [String]
  classroomGroups: [ClassroomGroups]
    @hasMany(indexName: "groupsByClassroom", fields: ["id"])
  weekDay: String
  conferenceCallLink: String
  lessonImpactLog: [ImpactLogEntry]
  classSentiment: [String]
  type: ClassroomType @default(value: "ONLINE")
  isZoiq: Boolean
  teachingStyle: TeachingStyle @default(value: "PERFORMER")
}

type ArchiveSurveyDataSQL @model @auth(rules: [{allow: private}]) {
  id: ID!
  AuthId: String!
  Email: String! @primaryKey(sortKeyFields: ["AuthId"])
  UniversalSurveyStudentID: String
  QuestionResult: [QuestionResults]!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClassroomGroupStudents @model @auth(rules: [{allow: private}]) {
  id: ID!
  classRoomGroupID: ID! @index(name: "studentsByCRgroup")
  classRoomGroup: ClassroomGroups @belongsTo(fields: ["classRoomGroupID"])
  studentEmail: String!
  studentAuthId: String!
  student: Person @hasOne(fields: ["studentEmail", "studentAuthId"])
  studentType: String
  studentNote: String
}

type ClassroomGroups @model @auth(rules: [{allow: private}]) {
  id: ID!
  classRoomID: ID! @index(name: "groupsByClassroom")
  classRoom: Room @belongsTo(fields: ["classRoomID"])
  groupName: String
  groupType: String
  advisorEmail: String!
  advisorAuthId: String!
  groupAdvisor: Person @hasOne(fields: ["advisorEmail", "advisorAuthId"])
  groupLocation: String
  classroomGroupsStudents: [ClassroomGroupStudents]
    @hasMany(indexName: "studentsByCRgroup", fields: ["id"])
}

type RoomCoTeachers @model @auth(rules: [{allow: private}]) {
  id: ID!
  roomID: ID! @index(name: "byRoom", sortKeyFields: ["teacherID"])
  teacherID: ID!
  teacherEmail: String!
  teacherAuthID: String!
  room: Room @belongsTo(fields: ["roomID"])
  teacher: Person @hasOne(fields: ["teacherEmail", "teacherAuthID"])
  curricula: [RoomCurriculum] @hasMany(indexName: "curriculumByRoom", fields: ["id"])
  type: ClassroomType @default(value: "ONLINE")
  teachingStyle: TeachingStyle @default(value: "PERFORMER")
}

type Class @model @auth(rules: [{allow: private}]) {
  id: ID!
  institutionID: ID! @index(name: "classByInstitution")
  type: String
  name: String!
  roomId: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  room: Room @hasOne(fields: ["roomId"])
  students: [ClassStudent]! @hasMany(indexName: "byClass", fields: ["id"])
}

type ClassStudent @model @auth(rules: [{allow: private}]) {
  id: ID!
  classID: ID! @index(name: "byClass", sortKeyFields: ["studentID"])
  studentID: ID!
  studentEmail: String! @index(name: "classByStudent")
  studentAuthID: String!
  status: String
  group: String
  class: Class @belongsTo(fields: ["classID"])
  student: Person @belongsTo(fields: ["studentEmail", "studentAuthID"])
}

type Curriculum @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  institutionID: ID! @index(name: "curriculumByInstitution")
  name: String!
  type: String
  image: String
  summary: String
  description: String
  objectives: [String]
  languages: [Language]
  institution: Institution @belongsTo(fields: ["institutionID"])
  designers: [String]
  universalSyllabusSeq: [String]
  checkpoints: [commonCheckpoint] @hasMany(indexName: "byType", fields: ["id"])
  universalSyllabus: [curriculumUnits]
    @hasMany(indexName: "unitsbyCurriculum", fields: ["id"])
  syllabiHistory: [String]
  signedOff: Boolean
  status: RoomStatus @default(value: "ACTIVE")
}

type Topic @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  curriculumID: ID! @index(name: "topicByCurriculum")
  learningObjectiveID: ID!
  curriculum: Curriculum @hasOne(fields: ["curriculumID"])
  learningObjective: LearningObjective @hasOne(fields: ["learningObjectiveID"])
  name: String!
  description: String
  distinguished: String
  excelled: String
  adequite: String
  basic: String
}

type CSequences @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  sequence: [String]
}

type LearningObjective @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  name: String!
  description: String
  curriculumID: ID!
}

type Rubric @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  name: String
  criteria: String
  topicID: ID!
  topic: Topic @hasOne(fields: ["topicID"])
  curriculumID: ID!
}

type RoomCurriculum @model @auth(rules: [{allow: private}]) {
  id: ID!
  roomID: ID! @index(name: "curriculumByRoom")
  curriculumID: ID!
  curriculum: Curriculum @hasOne(fields: ["curriculumID"])
}

type Checkpoint @model @auth(rules: [{allow: private}]) {
  id: ID!
  label: String!
  title: String
  subtitle: String
  stage: String
  type: String!
  instructionsTitle: String
  instructions: String
  questions: [CheckpointQuestions]! @hasMany(indexName: "byCheckpoint", fields: ["id"])
  purpose: String
  objectives: String
  designers: [String]
  language: String
  estTime: Int
  scope: String
  questionSeq: [String]
}

type commonCheckpoint @model(queries: null) @auth(rules: [{allow: private}]) {
  id: ID!
  type: String!
  typeID: ID! @index(name: "byType", sortKeyFields: ["checkpointID"])
  checkpointID: ID!
  curriculum: Curriculum @belongsTo(fields: ["typeID"])
  checkpoint: Checkpoint @hasOne(fields: ["checkpointID"])
}

type CheckpointQuestions @model(queries: null) @auth(rules: [{allow: private}]) {
  id: ID!
  checkpointID: ID! @index(name: "byCheckpoint", sortKeyFields: ["questionID"])
  questionID: ID! @index(name: "byQuestion", sortKeyFields: ["checkpointID"])
  required: Boolean!
  checkpoint: Checkpoint @belongsTo(fields: ["checkpointID"])
  question: Question @hasOne(fields: ["questionID"])
}

type Question @model @auth(rules: [{allow: private}]) {
  id: ID!
  label: String!
  type: String!
  question: String!
  designers: [String]
  language: String
  sourceId: String
  note: String
  options: [Option]
  published: Boolean
}

type QuestionSource @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
}

type QuestionType @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
}

type QuestionResponse {
  qid: String
  response: [String]
  demographicsUpdated: Boolean
  otherResponse: String
}

type AnthologyComment @model @auth(rules: [{allow: private}]) {
  id: ID!
  text: String
  email: String!
  authID: String!
  person: Person @hasOne(fields: ["email", "authID"])
  attachments: [Attachment]
  edited: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  entryID: ID!
}

type QuestionData @model @auth(rules: [{allow: private}]) {
  id: ID!
  syllabusLessonID: ID!
  checkpointID: ID!
  email: String!
  authID: String!
  person: Person @hasOne(fields: ["email", "authID"])
  componentType: String
  scheduleID: String
  lessonID: String
  responseObject: [QuestionResponse]
}

type PersonLocation @model @auth(rules: [{allow: private}]) {
  id: ID!
  personAuthID: String!
  personEmail: String! @primaryKey(sortKeyFields: ["personAuthID"])
  syllabusLessonID: ID!
    @index(name: "bySyllabusLesson", queryField: "personLocationBySyllabusLesson")
  lessonID: ID!
  roomID: ID!
  currentLocation: String
  lessonProgress: String
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
  room: Room @hasOne(fields: ["roomID"])
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
}

type Attendance @model @auth(rules: [{allow: private}]) {
  id: ID!
  studentID: ID!
    @index(name: "byStudent", sortKeyFields: ["date"], queryField: "attendanceByStudent")
  curriculumID: ID!
  syllabusID: ID!
  lessonID: ID!
  roomID: ID!
  date: AWSDate
  time: AWSTime
  isComplete: Boolean
  curriculum: Curriculum @hasOne(fields: ["curriculumID"])
  syllabus: UniversalSyllabus @hasOne(fields: ["syllabusID"])
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  room: Room @hasOne(fields: ["roomID"])
}

# Universal lesson tables ----------------------------------------------

type UniversalLesson @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  type: String!
  label: String
  title: String!
  institutionID: ID!
  institution: Institution @hasOne(fields: ["institutionID"])
  language: [Language!]
  designers: [String]
  objectives: [String]
  lessonPlanAttachment: String
  purpose: String
  introduction: String
  introductionTitle: String
  status: RoomStatus @default(value: "ACTIVE")
  instructions: [String]
  instructionsTitle: String
  summary: String
  summaryTitle: String
  duration: Float
  resources: String
  notes: String
  cardImage: String
  cardCaption: String
  lessonPlan: [UniversalLessonPlan]
  homework: [UniversalLessonPlan]
  darkMode: Boolean
  rubrics: [String]
  smallGroup: String
  groupSize: Int
  groupType: String
  smallGroupSize: Int
  smallGroupOption: String
  studentMaterials: String
  targetAudience: String
  isUsed: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type UniversalLessonStudentData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  syllabusLessonID: ID!
    @index(name: "bySyllabusLessonAndStudent", sortKeyFields: ["studentID"])
  lessonID: ID!
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  lessonPageID: ID!
  studentID: ID!
  studentAuthID: ID!
  studentEmail: String!
  roomID: String
  currentLocation: String
  lessonProgress: String
  pageData: [PartInput]
  hasExerciseData: Boolean
  exerciseData: [ExerciseData]
  date: AWSDateTime
}

type UniversalLessonWritingExcercises @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  syllabusLessonID: ID!
    @index(name: "bySyllabusLessonAndStudent", sortKeyFields: ["studentID"])
  lessonID: ID!
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  lessonPageID: ID!
  fromLesson: Boolean
  lessonName: String
  studentID: ID!
  studentAuthID: ID!
  studentEmail: String!
  roomID: String
  currentLocation: String
  lessonProgress: String
  pageData: [PartInput]
  hasExerciseData: Boolean
  exerciseData: [ExerciseData]
}

type UniversalArchiveData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  syllabusLessonID: ID!
    @index(name: "bySyllabusLessonAndStudent", sortKeyFields: ["studentID"])
  lessonID: ID!
  lessonPageID: ID!
  studentID: ID!
  studentAuthID: ID!
  studentEmail: String!
  roomID: String
  currentLocation: String
  lessonProgress: String
  pageData: [PartInput]
  hasExerciseData: Boolean
  exerciseData: [ExerciseData]
  surveyData: [PartInput]
}

type UniversalSurveyStudentData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  syllabusLessonID: ID!
    @index(name: "bySyllabusLessonAndStudent", sortKeyFields: ["studentID"])
  lessonID: ID!
  studentID: ID!
  studentAuthID: ID!
  studentEmail: String!
  roomID: String
  currentLocation: String
  lessonProgress: String
  surveyData: [PartInput]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type TemporaryUniversalUploadSurveyData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  updatedUserId: ID!
  universalSurveyId: ID
  universalSurveyStudentData: UniversalSurveyStudentData
    @hasOne(fields: ["universalSurveyId"])
  surveyData: [PartInput]
}

type TemporaryDemographicsUploadData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  updatedUserId: ID!
  questionDataID: ID
  QuestionData: QuestionData @hasOne(fields: ["questionDataID"])
  responseObject: [QuestionResponse]
}

type UploadLogs @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  TemporaryUniversalUploadSurveyDataID: ID
  TemporaryUniversalUploadSurveyData: TemporaryUniversalUploadSurveyData
    @hasOne(fields: ["TemporaryUniversalUploadSurveyDataID"])
  TemporaryDemographicsUploadDataID: ID
  TemporaryDemographicsUploadData: TemporaryDemographicsUploadData
    @hasOne(fields: ["TemporaryDemographicsUploadDataID"])
  UploadType: String
  updateType: UpdateType
  Date: AWSDate
  User_id: String!
  Curricullum_id: ID
  urlLink: String
  Unit_id: ID
  authID: String!
  email: String!
  lesson_id: ID
  room_id: ID
  Class_id: ID
  PaperSurveyURL: [String]
  Reason: String
  person: Person @hasOne(fields: ["email", "authID"])
  lesson: UniversalLesson @hasOne(fields: ["lesson_id"])
  room: Room @hasOne(fields: ["room_id"])
  unit: UniversalSyllabus @hasOne(fields: ["Unit_id"])
  surveyName: String
  unitName: String
  roomName: String
  personName: String
}

type ExerciseData {
  id: String!
  entryData: [JournalEntryData]
  feedbacks: [String]
  shared: Boolean
}

type UniversalJournalData @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  studentID: ID!
  studentAuthID: ID!
  studentEmail: String!
  type: String!
  lessonName: String
  fromLesson: Boolean
  entryData: [JournalEntryData]
  feedbacks: [String]
  shared: Boolean
  lessonID: ID
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  syllabusLessonID: String
  lessonType: String
  roomID: String
}

type JournalEntryData {
  domID: String
  type: String
  input: String
}

type StudentPageInput {
  pagePartID: String
  pagePartInput: [PartInput]
}

type PartInput {
  domID: String
  options: [String]
  input: [String]
  comments: [InputComment]
  hasTakenSurvey: Boolean
}

type InputComment {
  commentBy: ID
  comment: String
}

type UniversalSyllabus @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  name: String!
  type: String
  institutionID: ID!
  institution: Institution @hasOne(fields: ["institutionID"])
  description: String
  methodology: String
  policies: String
  pupose: String
  priorities: String
  secondary: String
  objectives: String
  languages: [Language]

  lessons: [UniversalSyllabusLesson]
    @hasMany(indexName: "UniversalLessonsBySyllabus", fields: ["id"])
  universalLessonsSeq: [String]
  designers: [String]
  status: RoomStatus @default(value: "ACTIVE")
  isUsed: Boolean
  lessonHistory: [String]
}

type curriculumUnits @model @auth(rules: [{allow: private}]) {
  id: ID!
  unitId: ID!
  unit: UniversalSyllabus @hasOne(fields: ["unitId"])
  curriculumId: ID! @index(name: "unitsbyCurriculum", sortKeyFields: ["unitId"])
}

type UniversalSyllabusLesson @model @auth(rules: [{allow: private}]) {
  id: ID!
  syllabusID: ID! @index(name: "UniversalLessonsBySyllabus", sortKeyFields: ["lessonID"])
  lessonID: ID!
  unit: String
  sequence: Int
  status: String
  complete: Boolean
  roster: [String!]
  viewing: String
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  lessonPlan: [ComponentSummary!]
  startDate: AWSDate
  endDate: AWSDate
}

type PersonSentiments @model @auth(rules: [{allow: private}]) {
  personAuthID: String! @primaryKey(sortKeyFields: ["date"])
  personEmail: String!
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
  date: AWSDate!
  time: AWSTime!
  responseText: String
  backstory: String
}

type Sentiments @model @auth(rules: [{allow: private}]) {
  id: ID!
  sentimentName: String!
  sentimentType: String!
}

type FeelingsArchive @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  personAuthID: String!
  personEmail: String!
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
  sentimentId: ID!
  sentiment: [Sentiments] @hasMany(fields: ["sentimentId"])
  classRoomID: ID!
  classRoom: Room @hasOne(fields: ["classRoomID"])
  lessonID: ID!
  lesson: UniversalLesson @hasOne(fields: ["lessonID"])
  date: AWSDate!
  time: AWSTime!
  sentimentName: [String!]
  comments: String
}

type PersonFiles @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  personAuthID: String!
  personEmail: String!
  uploadedAt: AWSDateTime
  feedbacks: [String]
  shared: Boolean
  lessonID: ID
  syllabusLessonID: String
  lessonType: String
  roomID: String
  files: [File]
  lessonPageID: ID
}

type Community @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  institutionID: ID!
  institution: Institution @hasOne(fields: ["institutionID"])
  cardName: String
  cardType: String
  cardDate: AWSDate
  summary: String
  cardImageLink: String
  startTime: AWSDateTime
  endTime: AWSDateTime
  location: String
  geoLocation: String
  additionalLinks: [String]
  additionalInfo: String
  personAuthID: String!
  personEmail: String!
  isEditedCard: Boolean
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
  chat: [CommunityChat] @hasMany(indexName: "chatByCommunity", fields: ["id"])
  summaryHtml: String
  likes: [String]
  chatCount: Int
}

type GameChanger @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  gameChangerName: String
  title: String
  objective: String
  gameChangerLinks: [String]
  inputs: [String]
  likes: [String]
}

type GameChangerLog @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  gameChangerID: ID!
  gameChanger: GameChanger @hasOne(fields: ["gameChangerID"])
  personEmail: String!
  personAuthID: String!
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
  startTime: AWSDate
  endTime: AWSDate
}

type CommunityChat @model @auth(rules: [{allow: private}]) {
  id: ID!
  communityId: ID! @index(name: "chatByCommunity")
  personAuthID: String!
  personEmail: String!
  msg: String
  createdAt: AWSDateTime
  isEditedChat: Boolean
  person: Person @hasOne(fields: ["personEmail", "personAuthID"])
}

type Subscription {
  onCreateUpdatePersonLocationItem(
    syllabusLessonID: ID!
    lessonID: ID!
    roomID: ID!
  ): PersonLocation
    @aws_subscribe(
      mutations: ["createPersonLocation", "updatePersonLocation", "deletePersonLocation"]
    )
  onDeletePersonLocationItem(
    syllabusLessonID: ID!
    lessonID: ID!
    roomID: ID!
  ): PersonLocation @aws_subscribe(mutations: ["deletePersonLocation"])

  onChangeUniversalLessonStudentData(
    syllabusLessonID: ID!
    lessonID: ID!
    studentAuthID: ID!
  ): UniversalLessonStudentData
    @aws_subscribe(
      mutations: ["createUniversalLessonStudentData", "updateUniversalLessonStudentData"]
    )
  onChangeRoom(id: ID!): Room @aws_subscribe(mutations: ["updateRoom"])
}

type ErrorLog @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  pageUrl: String
  componentName: String
  error: String!
  errorType: String!
  errorTime: AWSDateTime
  email: String!
  authID: String!
  person: Person @hasOne(fields: ["email", "authID"])
  status: ErrorStatus @default(value: "PENDING")
}

type Dicitionary @model @auth(rules: [{allow: private}]) {
  id: ID! @primaryKey
  authID: String! # to know which user added/updated dictionary
  email: String!
  person: Person @hasOne(fields: ["authID", "email"])
  englishPhrase: String! # this is main
  englishAudio: String # this will be url (optional)
  englishDefinition: String # optional too.
  translation: [Translation]
}

input CreateClassStudentInput {
  id: ID
  classID: ID!
  studentID: ID!
  studentEmail: String!
  studentAuthID: String!
  status: String
  group: String
}

type Mutation {
  batchAddClassStudent(classStudents: [CreateClassStudentInput]): [ClassStudent]
}
# test push
